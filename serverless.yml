service: todo-api

plugins: 
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: ap-northeast-1
  timeout: 10
  environment:
    usersTable: ${self:service}-users-${opt:stage, self:provider.stage}
    tasksTable: ${self:service}-tasks-${opt:stage, self:provider.stage}
    taskListsTable: ${self:service}-taskLists-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.usersTable}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.tasksTable}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.taskListsTable}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.usersTable}/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.tasksTable}/*"

package:
  exclude:
    - node_modules/**
    - migrations/**
    - .dynamodb/**
    - .git/**

functions:
  user_create:
    handler: users/create.create
    events:
      - http:
          path: users
          method: post
          cors: true
  user_update:
    handler: users/update.update
    events:
      - http:
          path: users/{id}
          method: patch
          cors: true
  user_delete:
    handler: users/delete.delete
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
  user_tasks_taskLists:
    handler: users/tasks_taskLists.tasks_taskLists
    events:
      - http:
          path: users/{id}/tasks_tasklists
          method: get
          cors: true
  taskList_create:
    handler: taskLists/create.create
    events:
      - http:
          path: tasklists
          method: post
          cors: true
  taskList_index:
    handler: taskLists/index.index
    events:
      - http:
          path: tasklists
          method: get
          cors: true
  taskList_update:
    handler: taskLists/update.update
    events:
      - http:
          path: tasklists/{id}
          method: patch
          cors: true
  taskList_delete:
    handler: taskLists/delete.delete
    events:
      - http:
          path: tasklists/{id}
          method: delete
          cors: true
  taskList_tasks:
    handler: taskLists/tasks.tasks
    events:
      - http:
          path: tasklists/{id}/tasks
          method: get
          cors: true
  task_create:
    handler: tasks/create.create
    events:
      - http:
          path: tasks
          method: post
          cors: true
  task_update:
    handler: tasks/update.update
    events:
      - http:
          path: tasks/{id}
          method: patch
          cors: true
  task_add:
    handler: tasks/add_remove.add_remove
    events:
      - http:
          path: tasks/{id}/add
          method: patch
          cors: true
  task_remove:
    handler: tasks/add_remove.add_remove
    events:
      - http:
          path: tasks/{id}/remove
          method: patch
          cors: true
  task_done:
    handler: tasks/done_undone.done_undone
    events:
      - http:
          path: tasks/{id}/done
          method: patch
          cors: true
  task_undone:
    handler: tasks/done_undone.done_undone
    events:
      - http:
          path: tasks/{id}/undone
          method: patch
          cors: true
  task_delete:
    handler: tasks/delete.delete
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true
  task_users:
    handler: tasks/users.users
    events:
      - http:
          path: tasks/{id}/users
          method: get
          cors: true
# DynamoDB settings
resources:
  Resources:
    # users
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.usersTable}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: users_gsi_email
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    # tasks
    tasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.tasksTable}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: taskListId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: tasks_gsi_taskListId
            KeySchema:
              -
                AttributeName: taskListId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    # task_lists
    taskListsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.taskListsTable}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: ${self:provider.environment.usersTable}
            sources: [./migrations/users.json]
          - table: ${self:provider.environment.tasksTable}
            sources: [./migrations/tasks.json]
          - table: ${self:provider.environment.taskListsTable}
            sources: [./migrations/taskLists.json]
