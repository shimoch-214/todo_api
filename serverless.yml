# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
# test

service: todo-api

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 
        - "arn:aws:dynamodb:ap-northeast-1:*:table/usersTable"
        - "arn:aws:dynamodb:ap-northeast-1:*:table/tasksTable"
        - "arn:aws:dynamodb:ap-northeast-1:*:table/taskListsTable"
        - "arn:aws:dynamodb:ap-northeast-1:*:table/usersTable/*"
        - "arn:aws:dynamodb:ap-northeast-1:*:table/tasksTable/*"


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  user_create:
    handler: users/create.create
    events:
      - http:
          path: users
          method: post
          integration: lambda
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path("$")
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '.*"statusCode": 400,.*'
                headers:
                  Content-Type: "'application/json'"
                template: $input.path("$.errorMessage")
  user_update:
    handler: users/update.update
    events:
      - http:
          path: users/{id}
          method: put
          integration: lambda
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path("$")
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '.*"statusCode": 400,.*'
                headers:
                  Content-Type: "'application/json'"
                template: $input.path("$.errorMessage")
  user_delete:
    handler: users/delete.delete
    events:
      - http:
          path: users/delete/{id}
          method: patch
          integration: lambda
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path("$")
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '.*"statusCode": 400,.*'
                headers:
                  Content-Type: "'application/json'"
                template: $input.path("$.errorMessage")
  taskList_create:
    handler: taskLists/create.create
    events:
      - http:
          path: tasklists
          method: post
          cors: true
  taskList_index:
    handler: taskLists/index.index
    events:
      - http:
          path: tasklists
          method: get
          cors: true
  taskList_update:
    handler: taskLists/update.update
    events:
      - http:
          path: tasklists/{id}
          method: patch
          cors: true
  taskList_delete:
    handler: taskLists/delete.delete
    events:
      - http:
          path: tasklists/{id}
          method: delete
          cors: true
  taskList_tasks:
    handler: taskLists/tasks.tasks
    events:
      - http:
          path: tasklists/{id}/tasks
          method: get
          cors: true
  task_create:
    handler: tasks/create.create
    events:
      - http:
          path: tasklists/tasks
          method: post
          cors: true
  task_update:
    handler: tasks/update.update
    events:
      - http:
          path: tasklists/tasks/{id}
          method: patch
          cors: true
  task_add:
    handler: tasks/add_remove.add_remove
    events:
      - http:
          path: tasklists/tasks/{id}/add
          method: patch
          cors: true
  task_remove:
    handler: tasks/add_remove.add_remove
    events:
      - http:
          path: tasklists/tasks/{id}/remove
          method: patch
          cors: true
  task_delete:
    handler: tasks/delete.delete
    events:
      - http:
          path: tasklists/tasks/{id}
          method: delete
          cors: true
# DynamoDB settings
resources:
  Resources:
    # users
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: users_gsi_email
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    # tasks
    tasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tasksTable
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: taskListId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: tasks_gsi_taskListId
            KeySchema:
              -
                AttributeName: taskListId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    # task_lists
    taskListsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: taskListsTable
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


